name: Alternative Workflow

on:
  push:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs: 
      started_time: ${{ steps.job-start.outputs.STARTED_TIME }}
    
    steps:

      - name: Job start
        id: job-start
        run: |
          echo "STARTED_TIME=$(date +%s)" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          tags: simple-python-app:${{ github.sha }}
          outputs: type=docker,dest=/tmp/simple-python-app.tar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: simple-python-app
          path: /tmp/simple-python-app.tar

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: simple-python-app
          path: /tmp

      - name: Run Trivy vulnerability scan
        run: |
          docker load --input /tmp/simple-python-app.tar
          docker image ls -a  
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL simple-python-app:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ "build", "test"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: simple-python-app
          path: /tmp

      - name: Deploy to Docker Hub
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          docker load --input /tmp/simple-python-app.tar
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          docker tag simple-python-app:${{ github.sha }} ${{ secrets.DOCKER_HUB_USERNAME }}/simple-python-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/simple-python-app:${{ github.sha }}

      - name: Send info to Datadog
        env:
          STARTED_TIME: ${{ needs.build.outputs.STARTED_TIME }}
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          export FINISHED_TIME=$(date +%s)
          echo $FINISHED_TIME
          echo $STARTED_TIME
          echo $GITHUB_SHA
          echo $GITHUB_REPOSITORY
          echo $GITHUB_SERVER
          curl -X POST "https://api.us5.datadoghq.com/api/v2/dora/deployment" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: $DATADOG_API_KEY" \
            -d '{
              "data": {
                "attributes": {
                  "started_at": '"$STARTED_TIME"',
                  "finished_at": '"$FINISHED_TIME"',
                  "git": {
                    "commit_sha": "'"$GITHUB_SHA"'",
                    "repository_url": "'"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"'"
                  },
                  "service": "'"$GITHUB_REPOSITORY"'",
                  "version": "1"
                }
              }
            }'

  on_failure:
    runs-on: ubuntu-latest
    needs: [ build, test, deploy ]
    env:
      DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
      STARTED_TIME: ${{ needs.build.outputs.STARTED_TIME }}
    if: ${{ always() && contains(needs.*.result, 'failure') }}  # Executa se qualquer job falhar ou for cancelado
    steps:
      - name: Run on failure
        run: |
          curl -X POST "https://api.us5.datadoghq.com/api/v2/dora/incident" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: $DATADOG_API_KEY" \
          -d '{
            "data": {
              "attributes": {
                "services": [
                  "'"$GITHUB_REPOSITORY"'"
                ],
                "started_at": '"$STARTED_TIME"',
                "finished_at": '"$(date +%s)"',
                "git": {
                  "commit_sha": "'"$GITHUB_SHA"'",
                  "repository_url": "'"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"'"
                },
                "env": "dev",
                "name": "'"Failure on workflow from $GITHUB_REPOSITORY "'",
                "severity": "High",
                "version": "1"
              }
            }
          }'
